"""
This module contains the agent class. 
"""
import kUtil, pickle, os, math, unittest, ball

class agent():
    """
    The agent Class
    
    The agent class contains all the core functionality of the agent. All of the
    intelligence or hand coded agents will go and inherit this class. 
    
    :param worldRef: this is a reference to the simulator class. agent will
        only be allowed to access the public methods in the simulator. It will
        in no way be able to modify simulator values
    :param simIndex: The simulator that the agent keeps track of the agent in an array. 
        The simIndex is the index position of this agent in the simulators array. This 
        variable will help the simulator keep track of the agent
    :param noisy_pos: The agent shouldn't know it's exact position in the simulator, so
        a noisy position is given to it. noisy_pos is a noisy reading of the agent's 
        position on the field. 
    :param sigma: this is the value that sets how noisy the agents readings of it's position 
        is, as well as the positions of the other players, as well as how accurate 
        its perception of where the ball is. 
    :param agentType: indicates if the is a keeper or a taker. Set agentType to "keeper" for 
        keepers, and "taker" for takers. 
    :param noisyBallPos: This is a noisy coordinate for the position of the ball on the 
        field. 
    :param maxPlayerSpeed: This indicates how fast the agent is allowed to move on the field.
        This value is typically set to 2, for 2 pixels per time step. 
    :param maxBallSpeed: This indicates how fast the ball is allowed to move on the field. 
        This value is typically set to 3, for 3 pixels per time step. The value of maxBallSpeed 
        should be higher than that of maxPlayerSpeed.
    :param inPossession: This is an optional parameter that indicates if the player is currenly in
        possession of the ball. Default value is false.
    
        
    :type worldRef: keepAway
    :type simIndex: integer
    :type noisy_pos: tuple or list of floats 
    :type sigma: float
    :type agentType: string set to either "keeper" or "taker"
    :type noisyBallPos: tuple or list of floats 
    :type maxPlayerSpeed: integer
    :type maxBallSpeed: integer
    :type inPossession: boolean
    """
    #initial parameters: XY position, the sigma for calculating noise, and type "keeper" or "taker"
    def __init__(self, worldRef, simIndex, noisy_pos, sigma, agentType, noisyBallPos, maxPlayerSpeed, maxBallSpeed, inPossession = False):
        self.__sigma = sigma
        self.__simIndex = simIndex #sim index = agent's index in the simulator array
        self.__noisy_pos = noisy_pos
        self.__agentType = agentType #definitely make this info available to simulator
        self.maxPlayerSpeed = maxPlayerSpeed
        self.keeperArray = None
        self.takerArray = None
        self.agentListIndex = None
        self.stateVariables = None
        self.onReceiveDecision = None #receive variables
        self.birdsEyeView = None #the birds eye view for the hyperNEAT agent
        self.worldRef = worldRef
        
        #BALL VARIABLES
        self.noisyBallPos = noisyBallPos
        self.maxBallSpeed = maxBallSpeed
        self.fieldBall = None
        self.inPosession = False
        self.isKicking = False
        
        #go and initialize the variables used for getOpen and passBall
        portionOfBorderToStayAwayFrom = 0.15
        self.getOpenPoints = self.__initializeGetOpenGrid(portionOfBorderToStayAwayFrom)
        #the playable region is bound by a top left and a bottom right coordinate.
        #    these coordinates define a rectangle that the agents will try to stay in:
        #    when an agent passes the ball, it makes sure it's team mate can get the ball
        #    at the edge of the boundary
        self.playableRegionTopLeft = (self.worldRef.get_display_height() * portionOfBorderToStayAwayFrom/2, 
                                    self.worldRef.get_display_width() * portionOfBorderToStayAwayFrom/2)
        self.playableRegionBottomRight = (self.worldRef.get_display_height() - self.playableRegionTopLeft[0],
                                          self.worldRef.get_display_width() - self.playableRegionTopLeft[1])
        
        #initialize the cosines of interest for getting rotated vectors
        self.cosinesOfInterest = []
        self.passAngleGranularity = 5
        self.terminalPassAngle = 45
        for i in list(range(5, self.terminalPassAngle, self.passAngleGranularity)):
            self.cosinesOfInterest.append(math.cos(math.pi / 180 * i))
        
        
    #used only in keepaway.py
    #used by keepaway.py go give the agent a direct reference to the ball object. 
    #agent will need this reference in order to set the ball's velocity if the agent ever gains posession
    def receiveBallReference(self, inputBall):
        """
        This function gives the agent a reference to the field ball. Only
        the keepaway.py module should be using this function.
        
        :param inputBall: this is the ball that the agent is getting a
            reference to. This function should only be called from the
            simulator class. 
        
        :type inputBall: ball
        
        :returns: no return
        """
        self.fieldBall = inputBall
    
    #this function will only be used by keepaway.py to update some initial variables that couldn't be updated
    #in __init__
    def receiveListOfOtherPlayers(self,  keeperArray, takerArray,index):
        """
        This function gives the agent a reference to the simulators array
        of keepers and takers. The index that is being input is value from
        0 to 2, and indicates how relatively close the agent is to the ball.
        Only the keepaway.py module should be calling this function.
        
        :param keeperArray: This is the array of keepers from the simulator
        :param takerArray: This is the array of takers from the simulator
        :param index: the index is a value given to the agent indicating just
            how close this agent is to the ball. For example, if an index of 0 is given, 
            then that means this agent is the closest keeper/taker to the ball.
        
        :type keeperArray: List or Tuple of agents
        :type takerArray: List or Tuple of agents
        :type index: integer or float
        
        :returns: no return
        """
        self.takerArray = takerArray
        self.keeperArray = keeperArray
        self.agentListIndex= index #index in either the taker list or keeper list
        
    #used only in keepaway.py
    #When the world calculates the state variables, the agent will get a noisy copy of them
    def receiveSimpleStateVariables(self, noisyVariables):
        """
        The simulator will call this function in order to give the agent class
        a noisy version of the simple state variables.
        Only the keepaway.py module should be calling this function.
        
        :param noisyVariables: This is the array containing the noisy version
            of the simple state variables. 
        
        :type noisyVariables: tuple or list of numbers
        
        :returns: no return
        """
        self.stateVariables = noisyVariables
        
    def receiveBirdsEyeView(self, grid):
        """
        The simulator will call this function in order to give the agent class
        a the birds eye view of the field
        
        :param grid: a 2D grid of floats where each float represents a tile. Each tile will have a slightly
            negative value for tiles that are in the path between Keeper 0 and a taker, and slightly positive
            for tiles that are in the path from keeper 0 to the other keepers. Tiles that have a keeper on 
            it have a value of 1, and tiles that have a taker on it have a value of -1.
        
        :type grid: 2D arra of floats
        
        :returns: no return
        """
        self.birdsEyeView = grid
    
    #used only in keepaway.py   
    def receiveDecision(self, rDecision):
        """
        The simulator will call this function in order to give the agent class
        a noisy version of the receive decision. The receive decision is just a 
        tuple of 2 values: (argmin, point_to_run_to). the argmin is the index of
        the keeper, indicating which keeper is in the best position to acquire the 
        ball. The point_to_run_to is the point that this keeper must run to in order
        to acquire the ball. More details about how the receieve decision is calculated
        can be found in the calcReceive module.
        Only the keepaway.py module should be calling this function. 
        
        :param rDecision: a tuple containing the index of the keeper that's in the 
            best position to intercept the ball, and the coordinate that the keeper
            needs to go and run to. The coordinates that are received from the 
            simulator have some noise added to it. 
        
        :type rDecision: tuple containing an integer and a 2D coordinate
        
        :returns: no return
        """
        self.onReceiveDecision = rDecision
    
    #used only in keepaway.py. Only keepaway.py is allowed to actually change positions of agents
    #agents only have the power to request movements
    def updateAgentPosition(self, noisyPosition):
        """
        The simulator will call this function in order to update the noisy position
        of the agent. Noisy positions are used by the different agents for all
        of the calculates that take place at the agent level. The simulator 
        calculates things with the true positions, and the true positions are kept
        private from the agent classes. 
        Only the keepaway.py module should be calling this function.
        
        :param noisyPosition: This is a coordinate with a noisy reading of the
            agent's current position.
        
        :type noisyPosition: tuple or list of numbers
        
        :returns: no return
        """
        self.__noisy_pos = noisyPosition
    
    #for keepers, go to the intersection, or optimal point
    #for takers, just go to the ball
    #note: this returns a movement vector that must be implemented in keepaway
    def __goToBall(self):
        """
        If a keeper is calling this method, then this method will make the keeper
        run directly towards the ball if the ball is stationary. If the ball is 
        not stationary, then the simulator will use the calcReceieve methods in 
        order to calculate the optimal intersection point that the keeper can 
        run to. The keeper will then run towards that intercept point using 
        this function. The only keeper that should be running to the ball is 
        the keeper that can get to the ball the fastest. all other keepers should
        be implementing the getOpen() function. 
        
        For a taker, the taker will simply run towards the ball. The taker that is 
        closest to the ball should call this function, while the taker that is farther
        should try to block a pass with blockPass method.
        
        :returns: no return
        
        .. note::
            For keepers, this function will use information that is set when the simulator calls
            the agent method receiveDecision. Do not call __goToBall for a keeper unless that
            simulator function has been called. 

        """
        if (self.__agentType == "keeper"):
            V = kUtil.getVector(self.__noisy_pos, self.onReceiveDecision[1])
            minDist = min(self.maxPlayerSpeed, kUtil.getDist(self.__noisy_pos, self.onReceiveDecision[1]))
        else:
            #you have a taker. have him be stupider by going to the ball rather than the intersection point
            V = kUtil.getVector(self.__noisy_pos, self.noisyBallPos)
            minDist = min(self.maxPlayerSpeed, kUtil.getDist(self.__noisy_pos, self.noisyBallPos))
        
        #these 2 lines of code are for if you want keepers and takers to go to same location
        #this is the more challenging case as the taker will predict where the ball intersects
        """
        V = kUtil.getVector(self.__noisy_pos, self.onReceiveDecision[1])
        minDist = min(self.maxPlayerSpeed, kUtil.getDist(self.__noisy_pos, self.onReceiveDecision[1]))
        """
        
        self.worldRef.moveAttempt(self, (V, minDist))
        #return (V, self.maxPlayerSpeed)
               
    
    #just hold your ground and return        
    def _holdBall(self):
        """
        If a keeper currently has the ball, then it has the option to hold the ball,
        or pass it. Call this function to hold the ball. Holding the ball means the
        agent holding the ball cannot move. Only the subclasses of agent should be
        using this function.
        
        :returns: no return
        """
        if self.fieldBall == None:
            print ("ERROR: trying to hold ball without actually having  ball") 
        return
    
            
    #only keeper 0 will have this option available
    def _passBall(self, integerK):
        """
        If a keeper currently has the ball, then it has the option to hold the ball,
        or pass it. Call this function to pass the ball. integerK represents the 
        keeper that the ball holder is passing to. integerK = 1 means pass to the 
        keeper that is closest to the ball besides the ball holder. integerK = 2
        means pass to the 2nd closest, and so on. Only subclasses of agent should
        be calling this function.
        
        :param integerK: this represents the 
            keeper that the ball holder is passing to. integerK = 1 means pass to the 
            keeper that is closest to the ball besides the ball holder. integerK = 2
            means pass to the 2nd closest, and so on.
        
        :type integerK: integer
        
        :returns: no return 
        """
        print("passing to keeper " +  str(integerK) + ", indexed by distance. ")
        #if you're passing to integerK = 1, then that means pass to the keeper that's closer to you
        #if you're passing ot integerK = 2, then that means pass to the keeper that's farther to you
        #0 is an invalid input
        sortedKeepers = sorted(self.keeperArray)
        if integerK == 0:
            print("Invalid input for integerK! integerK not allowed to be", integerK)
            return
        if self.fieldBall == None:
            print("ERROR: trying to hold ball without actually having  ball")
            return
        
        #pass to team mate integerK. if integerK = 1, then it's the 2nd element in array
        selfToTeammateDirection = kUtil.unitVector(kUtil.getVector(self.noisyBallPos, sortedKeepers[integerK].get_noisy_pos()))
        selfToTeammateVector = (kUtil.scalarMultiply(self.fieldBall.maxBallSpeed, selfToTeammateDirection))
        
        """
        #this code segment is for determining which angle you'd rather pass to. it's all deterministic
        ballPos = self.noisyBallPos
        passVectorsToConsider = []
        passVectorsToConsider.append(selfToTeammateDirection)
        for i in range(len(self.cosinesOfInterest)):
            passVectorsToConsider = passVectorsToConsider + self.__getRotatedVectors(selfToTeammateDirection, self.cosinesOfInterest[i])
        #now sort the vectors based on how open they are:
        self.worldRef.debugPassVectors(ballPos, passVectorsToConsider)
        passVectorsToConsider = sorted(passVectorsToConsider, 
                                       key = lambda vector: max ( kUtil.cosTheta(self.worldRef.takerArray[0].getNoisyMidPoint(), ballPos, kUtil.addVectorToPoint(ballPos, vector)), 
                                                                  kUtil.cosTheta(self.worldRef.takerArray[1].getNoisyMidPoint(), ballPos, kUtil.addVectorToPoint(ballPos, vector))),
                                        )
        #iterate over the sorted list until you find a pass that you can do
        for i in range(len(passVectorsToConsider)):
            if( calcReceive.calc_receive(self.worldRef, passVectorsToConsider[i]) != None): 
                selfToTeammateDirection = passVectorsToConsider[i]
                selfToTeammateVector = (kUtil.scalarMultiply(self.fieldBall.maxBallSpeed, selfToTeammateDirection))
                print "PASS USING ANGLE ACHEIVED AT i=", i
                break
        """    
                
        #at this point, you've determined the angle you wanna pass, and you pass.
        #set ball's possesion to false, and update to new point. ball class handles direction vector
        self.fieldBall.updatePosession(False)
        self.inPosession = False
        self.isKicking = True
        #kUtil.addVectorToPoint(self.fieldBall.trueBallPos, selfToTeammateVector)
        self.fieldBall.updateDirection(kUtil.getNoisyVals(selfToTeammateVector, self.__sigma))
        #self.fieldBall.updatepos( kUtil.addVectorToPoint(self.fieldBall.true_pos, selfToTeammateVector ) )
        #return (selfToTeammateDirection, self.maxBallSpeed)
    
    #UNIT TESTED 
    #use the solution to a quadratic formula to get the rotated unit vectors. So if you had a vector, and
    #you wanted the 2 vectors that you get when you rotate that vector 5 degrees in either direction,
    #then use this function. The formula from this function was derived from a dot b = mag(a)*mag(b)cosTheta
    #and the contrant that bx^2 + by^2 = 1 if b is a unit vector
    def __getRotatedVectors(self, vector, cos_k):
        """
        FUNCTION NOT USED IN FINAL IMPLEMENTATION
        
        This function will calculate 2 other angles that the agent can kick the ball to. If 
        the agent has calculated a direct path from itself to another keeper, that should be
        the input vector. If the agent is interested in passing at a 5 degree angle, then
        the 2nd input should be the cosine of 5 degrees. This function will then calculate 
        and return the 2 unit vectors which are the vectors pointing at 5 degree angles 
        
        :param vector: the vector that points directly from the  ball's noisy 
            position to the noisy position of the keeper the agent wants to pass to
        :param cos_k: the cosine of the angle that the agent wants to pass at. The
            reason cosine is used instead of the angle is for computational efficiency
        
        :type vector: list or tuple of numbers
        :type cos_k: number
        
        :returns: a list of 2 unit vectors, each one representing the 2 directions that
            the ball can be kicked to achieve the desired angle.
            
        :rtype: list of tuples, each tuple being a tuple of floats.
        """
        discriminantIsZero = False
        terminalPosCosZero = kUtil.addVectorToPoint(self.noisyBallPos, vector) 
        vector = kUtil.unitVector(vector)
        ax = vector[1] #columns are x
        ay = vector[0] #rows are y
        k = cos_k
        term1 = 2*k*ax #term 1 = -b 
        discriminant = term1 * term1 - 4 * (ax*ax +ay*ay)*(-1.0*ay*ay + k * k)
        discriminant = math.sqrt(discriminant)
        if (abs(discriminant) < 0.00001):
            discriminantIsZero = True
            
        #denominator = 2 * (ax*ax + ay*ay) #should be 2 every time if A is a unit vector
        denominator = 2 #should be 2 every time if A is a unit vector
        bx1 = (term1 - discriminant) / denominator
        #print "term1: ", term1, " discriminant:", discriminant, " denominator: ", denominator
        by1 = math.sqrt(1.0 - (bx1 * bx1))
        returnUnitVectors = []
        #make it (row,col) format, so therefore it's (y,x)
        returnUnitVectors.append((by1, bx1))
        returnUnitVectors.append((-1.0 * by1, bx1))
        
        if discriminantIsZero == False:
            bx2 = (term1 + discriminant) / denominator
            by2 = math.sqrt(1.0 - (bx2 * bx2))
            returnUnitVectors.append((by2, bx2))
            returnUnitVectors.append((-1.0 * by2, bx2)) 
            #print "return vectors"
            #print returnVectors
            returnUnitVectors = sorted(returnUnitVectors, key=lambda x: kUtil.getSqrDist(terminalPosCosZero, x))
            
        return returnUnitVectors[:2]
        
    #getOpen() needs to consider a very limited amount of points. 
    #this function should be called in initialization to go and defined the 
    #list of all points that getOpen will check 
    def __initializeGetOpenGrid(self, portionOfBorderToStayAwayFrom):
        """
        the agent.__getOpen() needs to consider a very limited amount of points for 
        computational efficiency. this function should be called during an agents
        initialization. When called, this function will go and define the 
        list of the 25 points that getOpen will check, arranged in a 5x5 grid
        
        :param portionOfBorderToStayAwayFrom: When assigning points on the field
            to check, the agent will not consider areas close to the border. For 
            example, assume that 
            portionOfBorderToStayAwayFrom = .15, and the height and width of the
            field are both 100px. Then none of the 25 points will be in top 15 
            rows of pixels, nor the bottom 15 rows of pixels. The same goes for 
            the 15 leftmost columns of pixels, and the rightmost 15 columns of
            pixels. The 5x5 grid of points to consider will be evenly spaced out
            and laid in the 70 pixel by 70 pixel center. 
        
        :type portionOfBorderToStayAwayFrom: a float > 0 but < 1
        
        :returns: a list containing the 25 coordinates of points to consider for
            the agent.__getOpen() function
        
        :rtype: a list of coordinates. each coordinate is a tuple of floats
        """
        #portionOfBorderToStayAwayFrom specified which percent of the boarder
        #to ignore. So it you migth end up ignoring 15% of the border
        #The rest of the area, split it into 25 points, going 5x5
        cutoffWidth = self.worldRef.get_display_width() * portionOfBorderToStayAwayFrom
        cutoffHeight = self.worldRef.get_display_height() * portionOfBorderToStayAwayFrom
        widthIncrement = (self.worldRef.get_display_width() - (2 * cutoffWidth)) / 5.0
        heightIncrement = (self.worldRef.get_display_height() - (2*cutoffHeight)) / 5.0
        returnList = []
        for i in range(5):
            #i will be the row index iterator
            for j in range(5):
                #j will be the column index iterator
                returnList.append( (cutoffHeight + heightIncrement * i, cutoffWidth + widthIncrement * j) )
        return returnList
            
    
    def __getOpen(self):
        """
        This function implements a hand coded procedure to go and place individual agents
        in an optimal position to receive a pass. The code for this function is 
        based heavily on "Algorithm 2 GetOpen:Hand-coded", which is the pseudo-code
        for the getOpen function used by some other researchers and was published 
        here:
        http://www.cs.utexas.edu/users/pstone/Papers/bib2html-links/LNAI09-kalyanakrishnan-1.pdf
        
        Only keeper who are not trying to go after the ball should call this method.
        The decision for who goes after the ball or gets open is deterministic. 
        
        :returns: nothing
        """
        #note: safety constant is cos(18.4) degrees
        safetyConstant = 0.94887601164449654493424118056447
        curMax = float("-inf")
        argMax = self.getOpenPoints[12] #default case
        if self.worldRef.fieldBall.trueBallDirection == (0.0, 0.0):
            predictedBallPos = self.noisyBallPos
        else:
            predictedBallPos = self.onReceiveDecision[1]
        for point in self.getOpenPoints:
            safety = max(kUtil.cosTheta(point, predictedBallPos, self.takerArray[0].get_noisy_pos()),
                         kUtil.cosTheta(point, predictedBallPos, self.takerArray[1].get_noisy_pos()))
            if (safety > safetyConstant):
                #angle is too narrow, a taker can easily steal
                continue
            
            #if you're at this point, then then point is a safe point to consider
            teamCongestion = 0.0
            oppCongestion = 0.0
            totalCongestion = 0.0
            value = 0.0
            for i in range(len(self.keeperArray)):
                if i != self.agentListIndex:
                    teamCongestion += 1.0 / (kUtil.getDist(self.keeperArray[i].get_noisy_pos(), point))
            for i in range(len(self.takerArray)):
                oppCongestion += 1.0 / (kUtil.getDist(self.takerArray[i].get_noisy_pos(), point))
            totalCongestion = teamCongestion + oppCongestion
            value = -1.0 * totalCongestion
            if (value > curMax):
                curMax = value
                argMax = point
        #At this point, just run towards argMax at max speed
        minDist = min(self.maxPlayerSpeed, kUtil.getDist(self.__noisy_pos, argMax))
        self.worldRef.moveAttempt(self, (kUtil.getVector(self.__noisy_pos, argMax), minDist) )
                    
        
    
    def __blockPass(self, kIndex):
        """
        This function will take a keeper to block as a parameter. The keeper 
        that this taker is trying to block should NOT have the ball. 
        This function works by taking the position of the keeper with the ball, 
        and the position of the keeper to block, and making the taker run to the 
        midpoint of these 2 positions. In 3V2 keepaway, this function should be 
        implemented by the taker farther from the ball. 
        
        :param kIndex: the index of the keeper to take, sorted by distance. so kIndex = 1 means
            the keeper who is closest to the ball besides the keeper who has the ball. 
            kIndex = 2 means the 2nd closest keeper, and so on. 
        :type kIndex: integer
        
        :returns: nothing
        """
        #kIndex is ordered based on who is the closest keeper
        keeperActual = sorted(self.keeperArray)
        #use the current keeper 0 position to block pass
        midPoint = kUtil.getMidPoint(keeperActual[0].get_noisy_pos(), keeperActual[kIndex].get_noisy_pos())
        #use the predicted keeper 0 position to block pass
        #midPoint = kUtil.getMidPoint(self.onReceiveDecision[1], keeperActual[kIndex].noisy_pos)
        vector = kUtil.getVector(self.__noisy_pos, midPoint)
        minDist = min(self.maxPlayerSpeed, kUtil.getDist(self.__noisy_pos, midPoint))
        self.worldRef.moveAttempt(self, (vector, minDist))
        
    def __receive(self):
        """
        This function is implemented only by keepers. Each keeper will implement
        this in order to decide if it should run towards the ball, or if it 
        should try to get open to receive a pass. 
        
        :returns: nothing
        """
        if self.inPosession == True:
            print("you're not supposed to be receiving you idiot, you have the ball!!!!!")
            return
        if self.agentListIndex == self.onReceiveDecision[0]: #this is the agent to go to ball
            if self.worldRef.fieldBall.inPosession == False:
                self.__goToBall()
            else:
                self.__getOpen()
        else:
            self.__getOpen() #get open with respect to this
            
    #THIS FUNCTION IS MEANT TO BE OVER RIDDEN BY EXTENION OF AGENT        
    def _decisionFunction(self):
        """
        This function is meant to be over ridden by children class that are
        inheriting this method. This method is responsible for intelligence 
        decision of whether the ballkeeper should hold the ball, or pass
        to one of it's team mates. 
        """
        return
            
    def decisionFlowChart (self, message = None):
		"""
		This function will control the movement of keepers and takers. It controls 
		movement by calling on all the private movement functions that are in defined
		in this agent class
		"""
		if (self.getAgentType() == "taker"):
			takerActual = sorted(self.takerArray)
			if (self.agentListIndex == takerActual[0].agentListIndex):
				#you're the closer taker so go for the ball
				self.__goToBall()
			else:
				#you're the farther taker, so go and block pass to the closer keeper
				"""
				#this is the code where the 2nd taker is stupid. 
				keeperActual = sorted(self.keeperArray)
				cos2 = kUtil.cosTheta(self.get_noisy_pos(), keeperActual[0].get_noisy_pos(), keeperActual[1].get_noisy_pos())
				cos3 = kUtil.cosTheta(self.get_noisy_pos(), keeperActual[0].get_noisy_pos(), keeperActual[2].get_noisy_pos())
				if cos2 > cos3:
				    #block keeper 2
				    self.__blockPass(1)
				else:
				    self.__blockPass(2)
				"""
				#this is the code where the 2nd keeper is smarter and acts as if he understands positioning better
				                #this is the code where the 2nd taker is stupid. 
				keeperActual = sorted(self.keeperArray)
				cos2 = kUtil.cosTheta(takerActual[0].get_noisy_pos(), keeperActual[0].get_noisy_pos(), keeperActual[1].get_noisy_pos())
				cos3 = kUtil.cosTheta(takerActual[0].get_noisy_pos(), keeperActual[0].get_noisy_pos(), keeperActual[2].get_noisy_pos())
				if cos2 > cos3:
				    #if cos2 is bigger, then the taker going for the ball is also kinda blocking a pass to keeper 1. At least
				    #he's doing a better job blocking K1 than K2, so go block K2
				    self.__blockPass(2)
				else:
				    #otherwise, go block K1
				    self.__blockPass(1)

		else:
			#the agent is a keeper
			if(self.inPosession == False):
				#deterministic stuff happens here
				self.__receive()
			else:
				self._decisionFunction()
        
    #this function is for saving the training data
    #if you have multiple agents, make the inputAgent string
    #the name of the agent. So sarsa will be "sarsa_agent" or something
    #the name is the object name, such as "dict" or whatever
    def save_obj(self, obj, name, index , inputAgent):
        """
        this function is for saving the training data. 
        
        :param obj: the actual object that you're trying to save. It's usually
            a dict object that's being saved. 
        :param name: the name you're giving to the object you're saving. 
            So if you're saving a dict object, you might wanna set 
            the name to "training_dict"
        :param index: an integer representing the agent index in the simulators 
            agent array. example: If saving a keeper 2's dict, then index = 2. 
        :param inputAgent: name of type of agent. Such as "sarsa_agent", 
            or "neat_agent"
        
        :type obj: any object
        :type name: string
        :type index: integer
        :type inputAgent: string
        
        :returns: nothing
        """
        with open(inputAgent+'Obj/%d/'%index + name + '.pkl', 'wb') as f:
            pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)
    
    #this function is for loading the training data
    #if you have multiple agents, make the inputAgent string
    #the name of the agent. So sarsa will be "sarsa_agent" or something
    def load_obj(self, name, index, inputAgent ):
        """
        this function is for loading the saved training data. If the saved
        training data exists, load it with pickle and return it. Otherwise,
        return None.
         
        :param name: the name you're giving to the object you're saving. 
            So if you're saving a dict object, you might wanna set 
            the name to "training_dict"
        :param index: an integer representing the agent index in the simulators 
            agent array. example: If saving a keeper 2's dict, then index = 2. 
        :param inputAgent: name of type of agent. Such as "sarsa_agent", 
            or "neat_agent"
        
        :type name: string
        :type index: integer
        :type inputAgent: string
        
        :returns: either the saved data, or None
        :rType: object or None
        """
        fileExists = os.path.isfile(inputAgent+'obj/%d/'%index + name + '.pkl') 
        if(fileExists):
            with open(inputAgent+'obj/%d/'%index + name + '.pkl', 'rb') as f:
                return pickle.load(f)
        else:
            return None
    
    def getNoisyMidPoint(self):
        """
        this function simply returns the midpoint of this agent.
        
        :returns: noisy mid point
        :rType: tuple of integers
        """
        return( self.__noisy_pos[0] + (self.worldRef.get_agent_block_size() / 2.0 )  , self.__noisy_pos[1] + (self.worldRef.get_agent_block_size() / 2.0 ) )
    
    def getSigma(self):
        """
        this function simply returns the noise of the agent.
        
        :returns: noise value
        :rType: float
        """
        return self.__sigma
    
    def getSimIndex(self):
        """
        this function simply returns index of the agent in the simulators 
        corresponding array.
        
        :returns: agent's array index for the simuator's array. 
        :rType: integer
        """
        return self.__simIndex
    
    def get_noisy_pos(self):
        """
        this function simply returns the noisy position of the agent's position on the field
        
        :returns: noisy agent position
        :rType: tuple of floats
        """
        return self.__noisy_pos
    
    def getAgentType(self):
        """
        this function simply returns whether the agent is a keeper or taker
        
        :returns: either "keeper" or "taker"
        :rType: string
        """
        return self.__agentType
    
    #use this if you're sorting the agents for the purpose
    #of getting the state variables
    def __lt__(self, other):
        """
        this function is simply used to allow comparision between different agents, so
        that agents can be sorted. Agents are sorted based on which agent is closest to
        the ball. So now, the simulator can call sorted(agents), and an array of all the 
        agents is returned such that the agents are sorted based on who is closest to the ball.
        
        :returns: if self is closer to the ball than the other agent
        :rType: boolean
        """
        if self.onReceiveDecision == None:
            return kUtil.getDist(self.__noisy_pos, self.noisyBallPos) < kUtil.getDist(other.get_noisy_pos(), other.noisyBallPos)
        else:
            return kUtil.getDist(self.__noisy_pos, self.onReceiveDecision[1]) < kUtil.getDist(other.get_noisy_pos(), other.onReceiveDecision[1])
    
    
    
    
class testingCode(unittest.TestCase):
    #test case where you're at 45 degrees, and you rotate to 40 and 50 degrees
    def test_rotated_vectors(self):
        import keepAway
        keepAwayWorld = keepAway.keepAway(0)
        #intialize agent to position 25,25 with no noise/error, as a keeper, with (357/2, 550/2) as center of field,
        #and 2 as agent speed, and 3 as ball speed
        Agent = agent(keepAwayWorld,(25, 25), 0.0, "keeper", (357/2, 550/2), 2, 3)
        cos5 = math.cos(5.0 * math.pi / 180) #cosine of 3 degress. angle needs to be in radians
        #Agent.receiveListOfOtherPlayers(self.keeperArray, self.takerArray, i)
        testBall = ball.ball((25,25), 3, True)
        Agent.receiveBallReference(testBall)
        v = kUtil.getVector((25,25), (30, 30)) #a vector whose angle is 45 degrees
        answer = Agent.__getRotatedVectors(v, cos5)
        correctAnswer1 = [((math.cos(50 * math.pi / 180)), (math.sin(50 * math.pi/180))),
                          ((math.cos(40 * math.pi / 180)), (math.sin(40 * math.pi/180)))]
        """
        print "answer"
        print answer
        print "correct"
        print correctAnswer1
        """
        for i in range(len(correctAnswer1)):
            for j in range(len(correctAnswer1[i])):
                str1 = "failed at: i = %d "%i
                str2 = "j = %d" %j
                strend = str1 + str2
                self.assertAlmostEqual(answer[i][j], correctAnswer1[i][j], msg=strend)
    
    #test case where you're at 0 degrees, and you rotate to 5 degrees and - 5 degrees 
    def test_rotated_vectors2(self):
        import keepAway
        keepAwayWorld = keepAway.keepAway(0)
        #intialize agent to position 25,25 with no noise/error, as a keeper, with (357/2, 550/2) as center of field,
        #and 2 as agent speed, and 3 as ball speed
        Agent = agent(keepAwayWorld,(25, 25), 0.0, "keeper", (357/2, 550/2), 2, 3)
        print("These are the cosines of interest, printed in ", self) 
        print(Agent.cosinesOfInterest) 
        cos5 = math.cos(5.0 * math.pi / 180) #cosine of 3 degress. angle needs to be in radians
        #Agent.receiveListOfOtherPlayers(self.keeperArray, self.takerArray, i)
        testBall = ball.ball((25,25), 3, True)
        Agent.receiveBallReference(testBall)
        v = kUtil.getVector((25,25), (25, 30)) #a vector whose angle is 0 degrees
        answer = Agent.__getRotatedVectors(v, cos5)
        correctAnswer1 = [((math.sin(5 * math.pi / 180)), (math.cos(5 * math.pi/180))),
                          ((math.sin(-5 * math.pi / 180)), (math.cos(-5 * math.pi/180)))]
        for i in range(len(correctAnswer1)):
            for j in range(len(correctAnswer1[i])):
                str1 = "failed at: i = %d "%i
                str2 = "j = %d" %j
                strend = str1 + str2
                self.assertAlmostEqual(answer[i][j], correctAnswer1[i][j], msg=strend)
                
    #UNIT TESTED with display height = 357, display width = 550
    #go and test the function that initializes that get open points
    def test_get_open_initial_points(self):
        import keepAway
        keepAwayWorld = keepAway.keepAway()
        #intialize agent to position 25,25 with no noise/error, as a keeper, with (357/2, 550/2) as center of field,
        #and 2 as agent speed, and 3 as ball speed
        testAgent = agent(keepAwayWorld,(25, 25), 0.0, "keeper", (357/2, 550/2), 2, 3)
        #print "display height: ", testAgent.worldRef.get_get_display_height()()
        rows = [53.55, 103.53, 153.51, 203.49, 253.47]
        cols = [82.5, 159.5, 236.5,  313.5, 390.5]
        testPoints = testAgent.getOpenPoints
        for i in range(len(rows)):
            for j in range(len(cols)):
                testPoint = testPoints[i * len(rows) + j]
                self.assertAlmostEqual(testPoint[0], rows[i])
                self.assertAlmostEqual(testPoint[1], cols[j])
    def testCosinesOfInterest(self):
        import keepAway
        keepAwayWorld = keepAway.keepAway()
        Agent = agent(keepAwayWorld,(25, 25), 0.0, "keeper", (357/2, 550/2), 2, 3)
        anglesToTest = list(range(5, Agent.terminalPassAngle, Agent.passAngleGranularity))
        print("these are the angls to test:") 
        print(anglesToTest) 
        for i in range(len(Agent.cosinesOfInterest)):
            self.assertAlmostEqual(Agent.cosinesOfInterest[i], math.cos(anglesToTest[i] * math.pi / 180) )
        
        


if __name__ == "__main__":
    print('Unit Testing') 
    unittest.main()
